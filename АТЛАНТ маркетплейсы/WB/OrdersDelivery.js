function getDeliveryOrdersFromWB() {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjUwMTIwdjEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc1NTE0Mzg4MiwiaWQiOiIwMTk0ZmFlMS1iMTI0LTc2M2EtYTI5OS00ZWFkMzBhMDBjNzciLCJpaWQiOjIyODU1MDkwLCJvaWQiOjEzNjE0MjgsInMiOjM4MzgsInNpZCI6Ijg5ZjRiNjllLTFkNDYtNDZiYS1hN2JkLWU0NjRjODczODliMyIsInQiOmZhbHNlLCJ1aWQiOjIyODU1MDkwfQ.7pX4vEgx-hfw6iywBb8V0LncnKJZFI4zEZ7meeIW2I7RNf6Ndnnuf8cokl6HMdEH7jL47ZaeOW_TWl1q4Gsr1Q";
    const SHEET_ID = "1eVrO8Bkq90YF2muG5bVNttzfO15i5T-2WRWsCYiqLL4";
    const SHEET_NAME = "–î–æ—Å—Ç–∞–≤–∫–∞";
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    const orders = getFBSOrders(API_KEY);
    if (!orders || !orders.orders) {
      Logger.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    const orderIds = orders.orders.map(order => order.id);
    Logger.log(`üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orderIds.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ
    const filteredOrders = getOrdersStatus(API_KEY, orderIds, orders);
    if (filteredOrders.length === 0) {
      Logger.log("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏");
      // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, –Ω–æ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      saveToSheet([], SHEET_ID, SHEET_NAME);
    } else {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
      saveToSheet(filteredOrders, SHEET_ID, SHEET_NAME);
    }
  }
  
  function getFBSOrders(apiKey) {
    const url = "https://marketplace-api.wildberries.ru/api/v3/orders";
    
    // –£–¥–∞–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (30 –¥–Ω–µ–π)
    Logger.log(`üóìÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–∑–Ω–∞—á–µ–Ω–∏–µ API –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
    
    let allOrders = { orders: [] };
    let nextValue = 0;
    let hasMore = true;
    let pageCounter = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    while (hasMore && pageCounter < 20) { // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      pageCounter++;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã limit –∏ next
      const params = {
        limit: 1000,
        next: nextValue
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
      const urlWithParams = `${url}?${Object.entries(params)
        .map(([key, value]) => `${key}=${value}`)
        .join('&')}`;
      
      const options = {
        method: "GET",
        headers: {
          "Authorization": apiKey,
          "Content-Type": "application/json"
        },
        muteHttpExceptions: true
      };
      
      try {
        Logger.log(`üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageCounter}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${urlWithParams}`);
        const response = UrlFetchApp.fetch(urlWithParams, options);
        const responseCode = response.getResponseCode();
        const contentText = response.getContentText();
        
        Logger.log(`üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${responseCode}`);
        
        if (responseCode !== 200) {
          Logger.log(`‚ùå –û—à–∏–±–∫–∞ API: ${contentText}`);
          return null;
        }
        
        const data = JSON.parse(contentText);
        if (!data || !data.orders) {
          Logger.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ");
          Logger.log(`–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}`);
          return null;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
        allOrders.orders = allOrders.orders.concat(data.orders);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        Logger.log(`–ó–Ω–∞—á–µ–Ω–∏–µ next –≤ –æ—Ç–≤–µ—Ç–µ: ${data.next}, —Ç–µ–∫—É—â–µ–µ: ${nextValue}`);
        
        if (data.next !== undefined && data.next !== null && data.next !== nextValue && data.next !== 0) {
          nextValue = data.next;
          Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageCounter} —Å ${data.orders.length} –∑–∞–∫–∞–∑–∞–º–∏. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${nextValue}`);
        } else {
          hasMore = false;
          Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageCounter} —Å ${data.orders.length} –∑–∞–∫–∞–∑–∞–º–∏`);
        }
        
      } catch (e) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageCounter}:`);
        Logger.log(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${e.name}`);
        Logger.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}`);
        Logger.log(`–°—Ç–µ–∫: ${e.stack}`);
        hasMore = false; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    if (pageCounter >= 20) {
      Logger.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (20 —Å—Ç—Ä–∞–Ω–∏—Ü). –î–∞–ª—å–Ω–µ–π—à–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
    }
    
    Logger.log(`‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: ${allOrders.orders.length} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ ${pageCounter} —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–ø—Ä–æ—Å–æ–≤`);
    return allOrders;
  }
  
  function getOrdersStatus(apiKey, orderIds, allOrders) {
    const url = "https://marketplace-api.wildberries.ru/api/v3/orders/status";
    const batchSize = 1000;
    const filteredOrders = [];
    const statusCounts = {};
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const ordersMap = {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–∫–∞–∑–æ–≤
    if (Array.isArray(allOrders)) {
      // –ï—Å–ª–∏ allOrders - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
      allOrders.forEach(order => {
        if (order && order.id) {
          ordersMap[order.id] = order;
        }
      });
      Logger.log(`üì¶ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ ${Object.keys(ordersMap).length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞`);
    } else if (allOrders && allOrders.orders && Array.isArray(allOrders.orders)) {
      // –ï—Å–ª–∏ allOrders - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º orders, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      allOrders.orders.forEach(order => {
        if (order && order.id) {
          ordersMap[order.id] = order;
        }
      });
      Logger.log(`üì¶ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ ${Object.keys(ordersMap).length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ allOrders.orders`);
    } else {
      Logger.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!");
      Logger.log(`–¢–∏–ø allOrders: ${typeof allOrders}`);
      Logger.log(`–ó–Ω–∞—á–µ–Ω–∏–µ allOrders: ${JSON.stringify(allOrders).substring(0, 200)}...`);
      return [];
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –±–∞—Ç—á–∞–º–∏
    for (let i = 0; i < orderIds.length; i += batchSize) {
      const batch = orderIds.slice(i, i + batchSize);
      Logger.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ ${i}-${i+batch.length-1} (${batch.length} –∑–∞–∫–∞–∑–æ–≤)`);
      
      const options = {
        method: "POST",
        headers: {
          "Authorization": apiKey,
          "Content-Type": "application/json"
        },
        payload: JSON.stringify({ orders: batch }),
        muteHttpExceptions: true
      };
      
      try {
        const response = UrlFetchApp.fetch(url, options);
        const responseCode = response.getResponseCode();
        const contentText = response.getContentText();
        
        if (responseCode !== 200) {
          Logger.log(`‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–æ–≤: ${contentText}`);
          continue;
        }
        
        const statusData = JSON.parse(contentText);
        
        if (!statusData || !statusData.orders) {
          Logger.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —Å—Ç–∞—Ç—É—Å–æ–≤");
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statusData.orders.forEach(status => {
          // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          const statusPair = `${status.supplierStatus}/${status.wbStatus}`;
          statusCounts[statusPair] = (statusCounts[statusPair] || 0) + 1;
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∑–∞–∫–∞–∑—ã
          if (status.wbStatus === "waiting" && 
              (status.supplierStatus === "complete" || status.supplierStatus === "confirm")) {
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–¥–∞ find
            const orderData = ordersMap[status.id];
            if (orderData) {
              filteredOrders.push({
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': orderData.id,
                '–ê—Ä—Ç–∏–∫—É–ª WB': orderData.article || '',
                '–ë–∞—Ä–∫–æ–¥': orderData.skus?.[0] || '',  // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π SKU –∫–∞–∫ –±–∞—Ä–∫–æ–¥
                '–¶–µ–Ω–∞': orderData.price || 0,
                '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞': orderData.createdAt || '',
                '–°—Ç–∞—Ç—É—Å': `${status.supplierStatus}/waiting`
              });
            } else {
              Logger.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: ${status.id}`);
            }
          }
        });
        
        Logger.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è ${statusData.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        
      } catch (e) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ batch ${i}: ${e.toString()}`);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Logger.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:");
    Logger.log("----------------------------");
    Logger.log("| –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ | –°—Ç–∞—Ç—É—Å WB | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |");
    Logger.log("----------------------------");
    
    Object.entries(statusCounts).forEach(([status, count]) => {
      const [supplierStatus, wbStatus] = status.split('/');
      Logger.log(`| ${supplierStatus.padEnd(17)} | ${wbStatus.padEnd(9)} | ${count.toString().padEnd(10)} |`);
    });
    Logger.log("----------------------------");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const waitingCompleteCounts = statusCounts['complete/waiting'] || 0;
    Logger.log(`\nüîç –ó–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ complete/waiting: ${waitingCompleteCounts}`);
    
    Logger.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏: ${filteredOrders.length}`);
    return filteredOrders;
  }
  
  function saveToSheet(orders, sheetId, sheetName) {
    try {
      const ss = SpreadsheetApp.openById(sheetId);
      const sheet = ss.getSheetByName(sheetName);
      
      if (!sheet) {
        Logger.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç "${sheetName}"`);
        return;
      }
      
      // –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
      sheet.clear();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const now = new Date();
      sheet.getRange(1, 1).setValue("–û–±–Ω–æ–≤–ª–µ–Ω–æ:");
      sheet.getRange(1, 2).setValue(`${now.toLocaleDateString('ru-RU')} ${now.toLocaleTimeString('ru-RU')}`);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      sheet.getRange(1, 1, 1, 2).setFontWeight("bold").setBackground("#f3f3f3");
      
      // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const startRow = 3;
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = [
        '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
        '–ê—Ä—Ç–∏–∫—É–ª WB',
        '–ë–∞—Ä–∫–æ–¥',
        '–¶–µ–Ω–∞',
        '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
        '–°—Ç–∞—Ç—É—Å'
      ];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const data = [headers];
      orders.forEach(order => {
        data.push([
          order['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'],
          order['–ê—Ä—Ç–∏–∫—É–ª WB'],
          order['–ë–∞—Ä–∫–æ–¥'],
          order['–¶–µ–Ω–∞'],
          order['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'],
          order['–°—Ç–∞—Ç—É—Å']
        ]);
      });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const range = sheet.getRange(startRow, 1, data.length, headers.length);
      range.setValues(data);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headerRange = sheet.getRange(startRow, 1, 1, headers.length);
      headerRange.setFontWeight("bold");
      headerRange.setBackground("#e6e6e6");
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
      sheet.autoResizeColumns(1, headers.length);
      
      Logger.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É`);
      Logger.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
      
    } catch (e) {
      Logger.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: ${e.toString()}`);
    }
  }