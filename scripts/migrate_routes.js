require('dotenv').config();
const { kv } = require('@vercel/kv');
const { calculateMockDistanceMatrix, formatDeliveryId, calculateStraightDistance } = require('../server_utils'); // –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª

async function migrateRoutes() {
    console.log('üöÄ Starting route migration...');

    try {
        const allRoutes = await kv.get('routes') || [];
        const allDeliveries = await kv.get('deliveries') || [];
        let updatedRoutes = 0;

        const migratedRoutes = await Promise.all(allRoutes.map(async (route) => {
            // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if (!route.orderedRoute && route.orderedAddresses) {
                console.log(`- Migrating route #${route.id}...`);
                updatedRoutes++;

                const startPoint = { address: "–ü–æ–ø–æ–≤–∫–∞, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., 141892", coordinates: "37.298805 56.150459" };
                
                const pointsInRoute = route.orderedAddresses.map(addr => {
                    if (addr === startPoint.address) return startPoint;
                    return allDeliveries.find(d => d.address === addr);
                }).filter(Boolean);

                if (pointsInRoute.length !== route.orderedAddresses.length) {
                    console.warn(`  - Warning: Could not find all deliveries for route #${route.id}. Skipping.`);
                    return route; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏
                }

                const coordinates = pointsInRoute.map(p => p.coordinates);
                const matrix = await calculateMockDistanceMatrix(coordinates);
                const speedMps = 30 * 1000 / 3600;

                const newOrderedRoute = pointsInRoute.map((point, i) => {
                    const delivery = allDeliveries.find(d => d.id === point.id);
                    let travelInfo = { travelTimeToPoint: null, distanceToPointByRoad: null, timeAtPoint: null };
                    
                    if (i > 0) {
                        const distance = matrix.distance[i-1][i];
                        travelInfo.travelTimeToPoint = Math.round((distance * 1.44) / speedMps);
                        travelInfo.distanceToPointByRoad = distance * 1.44;
                    }

                    if(delivery) {
                        travelInfo.timeAtPoint = delivery.timeAtPoint;
                    }

                    return {
                        address: point.address,
                        deliveryId: delivery ? formatDeliveryId(delivery.id) : null,
                        ...travelInfo
                    };
                });
                
                return {
                    ...route,
                    orderedRoute: newOrderedRoute,
                    orderedAddresses: undefined // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
                };
            }
            return route;
        }));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ KV
        await kv.set('routes', migratedRoutes);

        console.log(`\n‚úÖ Migration complete!`);
        console.log(`   - Total routes checked: ${allRoutes.length}`);
        console.log(`   - Routes updated: ${updatedRoutes}`);

    } catch (error) {
        console.error('‚ùå An error occurred during migration:', error);
    }
}

// –í—ã–Ω–æ—Å–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
module.exports = { migrateRoutes };

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    migrateRoutes();
} 