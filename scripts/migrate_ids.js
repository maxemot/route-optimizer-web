require('dotenv').config();
const { kv } = require('@vercel/kv');

async function migrateData() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ ID...');

    try {
        // 1. –ú–∏–≥—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ (routes)
        const routes = await kv.get('routes') || [];
        const migratedRoutes = [];
        const routeIdMap = new Map(); // –ö–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö ID –Ω–æ–≤—ã–º —á–∏—Å–ª–æ–≤—ã–º

        if (routes.length > 0) {
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.`);
            for (const route of routes) {
                if (typeof route.id === 'string' && route.id.startsWith('–ü-')) {
                    const numericId = parseInt(route.id.replace('–ü-', ''), 10);
                    if (!isNaN(numericId)) {
                        routeIdMap.set(route.id, numericId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                        migratedRoutes.push({
                            ...route,
                            id: numericId // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π
                        });
                        console.log(`  - –ú–∞—Ä—à—Ä—É—Ç "${route.id}" –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ ID: ${numericId}`);
                    }
                } else {
                    // –ï—Å–ª–∏ ID —É–∂–µ —á–∏—Å–ª–æ–≤–æ–π, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                    migratedRoutes.push(route);
                }
            }
            await kv.set('routes', migratedRoutes);
            console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
        } else {
            console.log('‚ÑπÔ∏è –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }

        // 2. –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ (deliveries)
        const deliveries = await kv.get('deliveries') || [];
        const migratedDeliveries = [];

        if (deliveries.length > 0) {
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${deliveries.length} –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`);
            for (const delivery of deliveries) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π routeId, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏
                if (delivery.routeId && routeIdMap.has(delivery.routeId)) {
                    const numericRouteId = routeIdMap.get(delivery.routeId);
                    migratedDeliveries.push({
                        ...delivery,
                        routeId: numericRouteId // –û–±–Ω–æ–≤–ª—è–µ–º routeId –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π
                    });
                     console.log(`  - –£ –¥–æ—Å—Ç–∞–≤–∫–∏ #${delivery.id} –æ–±–Ω–æ–≤–ª–µ–Ω routeId —Å "${delivery.routeId}" –Ω–∞ ${numericRouteId}`);
                } else {
                    migratedDeliveries.push(delivery);
                }
            }
            await kv.set('deliveries', migratedDeliveries);
            console.log('‚úÖ –î–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
        } else {
             console.log('‚ÑπÔ∏è –î–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }

        // 3. –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ 'nextRouteId'
        // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—á–∏–Ω–∞–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
        // –ú—ã –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∏—Å–ª–æ–≤–æ–π ID –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        const allRoutes = await kv.get('routes') || [];
        const maxRouteId = allRoutes.reduce((max, r) => (typeof r.id === 'number' && r.id > max) ? r.id : max, 0);
        await kv.set('nextRouteId', maxRouteId + 1);
        console.log(`üîÑ –°—á–µ—Ç—á–∏–∫ 'nextRouteId' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: ${maxRouteId + 1}`);


        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1); // –í—ã—Ö–æ–¥ —Å –æ—à–∏–±–∫–æ–π
    }
}

migrateData(); 