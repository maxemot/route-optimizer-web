// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// let deliveries = []; // –£–¥–∞–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// let nextDeliveryId = 1; // –£–¥–∞–ª—è–µ–º, ID —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
let geocodedAddresses = {};
let socket = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ–∫–µ—Ç–∞

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const addDeliveryBtn = document.getElementById('add-delivery-btn');
const optimizeRouteBtn = document.getElementById('optimize-route-btn');
const selectedCount = document.getElementById('selected-count');
const deliveriesTable = document.getElementById('deliveries-table');
const deliveriesTbody = document.getElementById('deliveries-tbody');
const selectAllCheckbox = document.getElementById('select-all');
const deleteDeliveriesBtn = document.getElementById('delete-deliveries-btn');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const deliveryModal = document.getElementById('delivery-modal');
const routeModal = document.getElementById('route-modal');
const loader = document.getElementById('loader');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
const deliveryAddress = document.getElementById('delivery-address');
const deliveryVolume = document.getElementById('delivery-volume');
const deliveryTime = document.getElementById('delivery-time');
const addressCoordinates = document.getElementById('address-coordinates');
const addressError = document.getElementById('address-error');
const saveDeliveryBtn = document.getElementById('save-delivery');
const cancelDeliveryBtn = document.getElementById('cancel-delivery');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
const routeNumber = document.getElementById('route-number');
const deliveriesCount = document.getElementById('deliveries-count');
const totalDistance = document.getElementById('total-distance');
const totalDuration = document.getElementById('total-duration');
const routeStepsList = document.getElementById('route-steps-list');
const openYandexMapsBtn = document.getElementById('open-yandex-maps');
const createRouteBtn = document.getElementById('create-route-btn'); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
const routeError = document.getElementById('route-error');

let currentRouteData = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.classList.remove('show');
        // modal.style.display = 'none'; // –£–î–ê–õ–ï–ù–û: —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –º–µ—à–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∏—é –æ–∫–æ–Ω
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    closeAllModals();
    initializeEventListeners();
    loadAndRenderDeliveries();
    initializeWebSocket(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
    updateUI();
});

function initializeWebSocket() {
    socket = io(); // –ü–†–ê–í–ò–õ–¨–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    socket.on('connect', () => {
        console.log('‚úÖ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    socket.on('new_delivery', (newDelivery) => {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ WebSocket:', newDelivery);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
        if (document.querySelector(`tr[data-delivery-id='${newDelivery.id}']`)) {
            console.log(`–î–æ—Å—Ç–∞–≤–∫–∞ #${newDelivery.id} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.`);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        const emptyStateRow = deliveriesTbody.querySelector('.empty-state');
        if (emptyStateRow) {
            emptyStateRow.parentElement.innerHTML = '';
        }
        const newRow = createDeliveryRow(newDelivery);
        deliveriesTbody.appendChild(newRow);
        updateUI();
    });

    socket.on('deliveries_updated', (updatedDeliveries) => {
        console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫:', updatedDeliveries);
        updatedDeliveries.forEach(delivery => {
            const row = document.querySelector(`tr[data-delivery-id='${delivery.id}']`);
            if (row) {
                // –ó–∞–º–µ–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const newRow = createDeliveryRow(delivery);
                row.parentNode.replaceChild(newRow, row);
            }
        });
        updateUI();
    });

    socket.on('deliveries_deleted', (ids) => {
        console.log(`üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–æ–∫:`, ids);
        ids.forEach(id => {
            const row = document.querySelector(`tr[data-delivery-id='${id}']`);
            if (row) {
                row.remove();
            }
        });
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    });
    
    socket.on('delete_error', (errorMessage) => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorMessage);
        alert(errorMessage);
    });

    socket.on('disconnect', () => {
        console.warn('‚ùå WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
    });
}


async function loadAndRenderDeliveries() {
    try {
        showLoader('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫...');
        const response = await fetch('/api/deliveries');
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
        const deliveries = await response.json();
        renderDeliveriesTable(deliveries);
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
        hideLoader();
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

function initializeEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addDeliveryBtn.addEventListener('click', openDeliveryModal);
    optimizeRouteBtn.addEventListener('click', optimizeSelectedRoute);
    selectAllCheckbox.addEventListener('change', toggleSelectAll);
    deleteDeliveriesBtn.addEventListener('click', handleDeleteSelected);

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const closeButtons = document.querySelectorAll('.close');
    closeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const modal = this.closest('.modal');
            closeModal(modal);
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal') && event.target.classList.contains('show')) {
            closeModal(event.target);
        }
    });

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    deliveryAddress.addEventListener('blur', handleAddressBlur);
    deliveryAddress.addEventListener('input', clearAddressError);
    saveDeliveryBtn.addEventListener('click', saveDelivery);
    cancelDeliveryBtn.addEventListener('click', () => closeModal(deliveryModal));

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
    openYandexMapsBtn.addEventListener('click', () => openRouteInYandexMaps(currentRouteData?.yandexMapsUrl));
    createRouteBtn.addEventListener('click', handleCreateRoute);
}

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openModal(modal) {
    modal.classList.add('show');
}

function closeModal(modal) {
    modal.classList.remove('show');
    if (modal === deliveryModal) {
        clearDeliveryForm();
    }
}

function openDeliveryModal() {
    openModal(deliveryModal);
    deliveryAddress.focus(); // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
}

function clearDeliveryForm() {
    deliveryAddress.value = '';
    deliveryVolume.value = '1.0';
    deliveryTime.value = '15';
    addressCoordinates.textContent = '';
    addressError.textContent = '';
}

// –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
async function handleAddressBlur() {
    const address = deliveryAddress.value.trim();
    if (!address) return;

    if (geocodedAddresses[address]) {
        displayCoordinates(geocodedAddresses[address]);
        return;
    }

    try {
        showAddressLoading();
        const coordinates = await geocodeAddress(address);
        geocodedAddresses[address] = coordinates;
        displayCoordinates(coordinates);
        clearAddressError();
    } catch (error) {
        showAddressError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞');
        addressCoordinates.textContent = '';
    }
}

function showAddressLoading() {
    addressCoordinates.textContent = '–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...';
    addressCoordinates.style.color = '#718096';
}

function displayCoordinates(coordinates) {
    addressCoordinates.textContent = `üìç ${coordinates}`;
    addressCoordinates.style.color = '#38a169';
}

function showAddressError(message) {
    addressError.textContent = message;
}

function clearAddressError() {
    addressError.textContent = '';
}

async function geocodeAddress(address) {
    const response = await fetch('/api/geocode', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ address }),
    });

    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    const data = await response.json();
    return data.coordinates;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏
async function saveDelivery() {
    const address = deliveryAddress.value.trim();
    const volume = parseFloat(deliveryVolume.value);
    const timeAtPoint = parseInt(deliveryTime.value);

    if (!address || !geocodedAddresses[address] || volume <= 0 || timeAtPoint <= 0) {
        showAddressError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
        return;
    }

    const newDeliveryData = {
        // id –∏ status –±—É–¥—É—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º
        address: address,
        coordinates: geocodedAddresses[address],
        volume: volume,
        timeAtPoint: timeAtPoint,
        routeId: null
    };

    try {
        showLoader('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        const response = await fetch('/api/deliveries', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newDeliveryData),
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        
        const savedDelivery = await response.json(); // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Å ID

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ WebSocket, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω.
        // –°–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ 'new_delivery' –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (–≤–∫–ª—é—á–∞—è —ç—Ç–æ–≥–æ),
        // –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ socket.on('new_delivery').
        
        hideLoader();
        closeModal(deliveryModal);
        updateUI();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        hideLoader();
        alert(error.message);
    }
}

function renderDeliveriesTable(deliveries) {
    deliveriesTbody.innerHTML = '';

    if (!deliveries || deliveries.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td colspan="8" class="empty-state">
                <span class="empty-state-icon">üì¶</span>
                <h3>–î–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç–∞–≤–∫—É</p>
            </td>
        `;
        deliveriesTbody.appendChild(emptyRow);
        return;
    }

    deliveries.forEach(delivery => {
        const row = createDeliveryRow(delivery);
        deliveriesTbody.appendChild(row);
    });
    // –ü–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å–æ–≤
    updateSelectionState(deliveries);
}

function createDeliveryRow(delivery) {
    const row = document.createElement('tr');
    row.dataset.deliveryId = delivery.id;

    const statusBadge = getStatusBadge(delivery.status);
    const routeCell = delivery.routeId
        ? `<a href="#" class="route-link" onclick="openRouteFromLink(event)" data-route="${delivery.routeId}">${delivery.routeId}</a>`
        : '';
    const creationDate = delivery.createdAt || ''; // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É

    row.innerHTML = `
        <td>
            <input type="checkbox" class="delivery-checkbox" data-delivery-id="${delivery.id}" onchange="updateSelectionState()">
        </td>
        <td class="delivery-number">${delivery.id}</td>
        <td title="${delivery.address}">${truncateText(delivery.address, 40)}</td>
        <td class="coordinates-display">${delivery.coordinates}</td>
        <td>${statusBadge}</td>
        <td>${delivery.volume} –º¬≥</td>
        <td>${delivery.timeAtPoint} –º–∏–Ω</td>
        <td>${creationDate}</td>
        <td>${routeCell}</td>
    `;

    return row;
}

function getStatusBadge(status) {
    const statusLabels = {
        'new': '–ù–æ–≤–∞—è',
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'ready': '–ì–æ—Ç–æ–≤',
        'in-route': '–í –ø—É—Ç–∏',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
    };

    return `<span class="status-badge status-${status}">${statusLabels[status] || status}</span>`;
}

function createRouteLink(routeId) {
    if (routeId) {
        return `<a href="#" class="route-link" onclick="openRouteFromLink(event)" data-route="${routeId}">–ü—Ä–æ—Å–º–æ—Ç—Ä</a>`;
    }
    return '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    let text = '';
    if (hours > 0) text += `${hours} —á `;
    if (minutes > 0) text += `${minutes} –º–∏–Ω`;
    return { value: seconds, text: text.trim() || '–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã' };
}

function formatDistance(meters) {
    return { value: meters, text: (meters / 1000).toFixed(1) + ' –∫–º' };
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º
function toggleSelectAll() {
    const checkboxes = document.querySelectorAll('.delivery-checkbox');
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
    });
    updateSelectionState();
}

function updateSelectionState(deliveries) { // deliveries –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
    const checkboxes = document.querySelectorAll('.delivery-checkbox');
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < checkboxes.length;
    selectAllCheckbox.checked = checkedBoxes.length === checkboxes.length && checkboxes.length > 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    selectedCount.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${checkedBoxes.length} –¥–æ—Å—Ç–∞–≤–æ–∫`;

    // –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimizeRouteBtn.disabled = checkedBoxes.length < 1;
    deleteDeliveriesBtn.disabled = checkedBoxes.length === 0;

    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    checkboxes.forEach(checkbox => {
        const row = checkbox.closest('tr');
        if (checkbox.checked) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    });
}

function updateUI() {
    updateSelectionState();
}

async function handleDeleteSelected() {
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');
    if (checkedBoxes.length === 0) {
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${checkedBoxes.length} –¥–æ—Å—Ç–∞–≤–æ–∫?`)) {
        return;
    }
    
    // ID —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä. "–î-0007"), parseInt –Ω–µ –Ω—É–∂–µ–Ω.
    // –°–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–ª–æ–≤—ã—Ö ID, –Ω–æ –±—ç–∫–µ–Ω–¥ –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫–∏.
    // –û–®–ò–ë–ö–ê: –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, —Å–æ–∫–µ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –ø–∞—Ä—Å–∏—Ç ID. 
    // –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∏—Å–ª–æ–≤—ã–µ ID. –ù–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Ö –Ω–µ –∑–Ω–∞–µ—Ç.
    // –î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ: –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –≤ –¥—Ä—É–≥–æ–º data-–∞—Ç—Ä–∏–±—É—Ç–µ.
    // –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º—ã –≤–Ω–µ—Å–µ–º –≤ createDeliveryRow. –ê –∑–¥–µ—Å—å –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å,
    // –Ω–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É.
    // --- –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï ---
    // –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID, –∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Ö –ø–∞—Ä—Å–∏—Ç—å.
    // –≠—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –º–µ–Ω—è—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.
    const idsToDelete = Array.from(checkedBoxes).map(cb => cb.closest('tr').dataset.deliveryId);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
    if (socket && socket.connected) { // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        socket.emit('delete_deliveries', idsToDelete);
    } else {
        console.error('–°–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
async function optimizeSelectedRoute() {
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const response = await fetch('/api/deliveries');
    const deliveries = await response.json();

    const selectedDeliveries = Array.from(checkedBoxes).map(checkbox => {
        const deliveryId = checkbox.dataset.deliveryId; // –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        return { id: deliveryId };
    }).filter(d => d);

    if (selectedDeliveries.length < 1) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        return;
    }

    try {
        showLoader('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞...');
        const deliveryIds = selectedDeliveries.map(d => d.id);
        const routeData = await fetchOptimizedRoute(deliveryIds);

        currentRouteData = {
            ...routeData,
            deliveryIds: deliveryIds
        };

        hideLoader();
        showRouteResults(currentRouteData, true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–∑–¥–∞—Ç—å"
        updateUI();

    } catch (error) {
        hideLoader();
        showRouteError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ' + error.message);
    }
}

async function fetchOptimizedRoute(deliveryIds) {
    const response = await fetch('/api/optimize-route', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ deliveryIds }),
    });

    if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
    }

    return await response.json();
}


async function handleCreateRoute() {
    if (!currentRouteData) return;

    try {
        showLoader('–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...');
        const response = await fetch('/api/routes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(currentRouteData),
        });

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }

        const newRoute = await response.json();
        console.log('üéâ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', newRoute);

        hideLoader();
        closeModal(routeModal);
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç —á–µ—Ä–µ–∑ WebSocket

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        hideLoader();
        alert(error.message);
    }
}


function showRouteResults(routeData, isCreating) {
    routeNumber.textContent = isCreating ? "–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç" : `–ú–∞—Ä—à—Ä—É—Ç ‚Ññ${routeData.id}`;
    deliveriesCount.textContent = routeData.deliveryIds ? routeData.deliveryIds.length : routeData.orderedAddresses.length - 2;
    totalDistance.textContent = routeData.totalDistance.text;
    totalDuration.textContent = routeData.totalDuration.text;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    createRouteBtn.style.display = isCreating ? 'inline-block' : 'none';
    openYandexMapsBtn.style.display = routeData.yandexMapsUrl ? 'inline-block' : 'none';

    routeStepsList.innerHTML = '';
    routeData.orderedRoute.forEach((routePoint, index) => {
        const step = document.createElement('div');
        step.className = 'route-step';

        const addressSpan = document.createElement('span');
        addressSpan.className = 'route-step-address';
        addressSpan.textContent = `${index + 1}. ${routePoint.address}`;

        step.appendChild(addressSpan);

        if (routePoint.travelTimeToPoint !== null) {
            const timeSpan = document.createElement('span');
            timeSpan.className = 'route-step-time';
            const distanceText = formatDistance(routePoint.travelDistanceToPoint).text;
            const durationText = formatDuration(routePoint.travelTimeToPoint).text;
            timeSpan.textContent = `(${distanceText}, + ${durationText})`;
            step.appendChild(timeSpan);
        }

        routeStepsList.appendChild(step);
    });

    routeError.textContent = '';
    openModal(routeModal);
}

function showRouteError(message) {
    routeError.textContent = message;
    openModal(routeModal);
}

// –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞–º–∏
async function openRouteFromLink(event) {
    event.preventDefault();
    const routeId = event.target.dataset.route;
    if (!routeId) return;

    try {
        showLoader('–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞...');
        const response = await fetch(`/api/routes/${routeId}`);
        if (!response.ok) throw new Error('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const routeData = await response.json();
        currentRouteData = routeData;
        hideLoader();
        showRouteResults(routeData, false); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å"
    } catch (error) {
        hideLoader();
        alert(error.message);
    }
}

function openRouteInYandexMaps(url) {
    if (url) {
        window.open(url, '_blank');
    }
}

function findRouteById(routeId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if (currentRouteData && currentRouteData.routeId == routeId) {
        return currentRouteData;
    }
    return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoader(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    loader.querySelector('p').textContent = message;
    loader.classList.remove('hidden');
}

function hideLoader() {
    loader.classList.add('hidden');
} 