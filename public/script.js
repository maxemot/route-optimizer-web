// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// let deliveries = []; // –£–¥–∞–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// let nextDeliveryId = 1; // –£–¥–∞–ª—è–µ–º, ID —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
let geocodedAddresses = {};
const socket = io(); // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∫–µ—Ç–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const addDeliveryBtn = document.getElementById('add-delivery-btn');
const optimizeRouteBtn = document.getElementById('optimize-route-btn');
const selectedCount = document.getElementById('selected-count');
const deliveriesTable = document.getElementById('deliveries-table');
const deliveriesTbody = document.getElementById('deliveries-tbody');
const selectAllCheckbox = document.getElementById('select-all');
const deleteDeliveriesBtn = document.getElementById('delete-deliveries-btn');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const deliveryModal = document.getElementById('delivery-modal');
const routeModal = document.getElementById('route-modal');
const loader = document.getElementById('loader');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
const deliveryAddress = document.getElementById('delivery-address');
const deliveryVolume = document.getElementById('delivery-volume');
const deliveryTime = document.getElementById('delivery-time');
const addressCoordinates = document.getElementById('address-coordinates');
const addressError = document.getElementById('address-error');
const saveDeliveryBtn = document.getElementById('save-delivery');
const cancelDeliveryBtn = document.getElementById('cancel-delivery');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
const routeNumber = document.getElementById('route-number');
const deliveriesCount = document.getElementById('deliveries-count');
const totalDistance = document.getElementById('total-distance');
const totalDuration = document.getElementById('total-duration');
const routeStepsList = document.getElementById('route-steps-list');
const openYandexMapsBtn = document.getElementById('open-yandex-maps');
// copyRouteLinkBtn.addEventListener('click', copyRouteLink); // –£–¥–∞–ª—è–µ–º
const createRouteBtn = document.getElementById('create-route-btn');
createRouteBtn.addEventListener('click', handleCreateRoute);
const routeError = document.getElementById('route-error');

let currentRouteData = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.classList.remove('show');
        // modal.style.display = 'none'; // –£–î–ê–õ–ï–ù–û: —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –º–µ—à–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∏—é –æ–∫–æ–Ω
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    closeAllModals();
    initializeEventListeners();
    loadAndRenderDeliveries();
    initializeWebSocket(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
    updateUI();
});

function initializeWebSocket() {
    // const socket = io(); // –£–¥–∞–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä

    socket.on('connect', () => {
        console.log('‚úÖ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    socket.on('new_delivery', (newDelivery) => {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ WebSocket:', newDelivery);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
        if (document.querySelector(`tr[data-delivery-id='${newDelivery.id}']`)) {
            console.log(`–î–æ—Å—Ç–∞–≤–∫–∞ #${newDelivery.id} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.`);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        const emptyStateRow = deliveriesTbody.querySelector('.empty-state');
        if (emptyStateRow) {
            emptyStateRow.parentElement.innerHTML = '';
        }
        const newRow = createDeliveryRow(newDelivery);
        deliveriesTbody.appendChild(newRow);
        updateUI();
    });

    socket.on('deliveries_deleted', (ids) => {
        console.log(`üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–æ–∫:`, ids);
        ids.forEach(id => {
            const row = document.querySelector(`tr[data-delivery-id='${id}']`);
            if (row) {
                row.remove();
            }
        });
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    });
    
    socket.on('delete_error', (errorMessage) => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorMessage);
        alert(errorMessage);
    });

    socket.on('deliveries_updated', (updatedDeliveries) => {
        console.log('üó∫Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ WebSocket:', updatedDeliveries);
        renderDeliveriesTable(updatedDeliveries);
    });
    
    socket.on('route_error', (errorMessage) => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', errorMessage);
        alert(errorMessage);
    });

    socket.on('disconnect', () => {
        console.warn('‚ùå WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
    });
}


async function loadAndRenderDeliveries() {
    try {
        showLoader('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫...');
        const response = await fetch('/api/deliveries');
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
        const deliveries = await response.json();
        renderDeliveriesTable(deliveries);
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
        hideLoader();
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

function initializeEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addDeliveryBtn.addEventListener('click', openDeliveryModal);
    optimizeRouteBtn.addEventListener('click', optimizeSelectedRoute);
    selectAllCheckbox.addEventListener('change', toggleSelectAll);
    deleteDeliveriesBtn.addEventListener('click', handleDeleteSelected);

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const closeButtons = document.querySelectorAll('.close');
    closeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const modal = this.closest('.modal');
            closeModal(modal);
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal') && event.target.classList.contains('show')) {
            closeModal(event.target);
        }
    });

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    deliveryAddress.addEventListener('blur', handleAddressBlur);
    deliveryAddress.addEventListener('input', clearAddressError);
    saveDeliveryBtn.addEventListener('click', saveDelivery);
    cancelDeliveryBtn.addEventListener('click', () => closeModal(deliveryModal));

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
    openYandexMapsBtn.addEventListener('click', openRouteInYandexMaps);
    // copyRouteLinkBtn.addEventListener('click', copyRouteLink); // –£–¥–∞–ª—è–µ–º
    const createRouteBtn = document.getElementById('create-route-btn');
    createRouteBtn.addEventListener('click', handleCreateRoute);
    routeError.textContent = '';
    openModal(routeModal);
}

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openModal(modal) {
    modal.classList.add('show');
}

function closeModal(modal) {
    modal.classList.remove('show');
    if (modal === deliveryModal) {
        clearDeliveryForm();
    }
}

function openDeliveryModal() {
    openModal(deliveryModal);
    deliveryAddress.focus(); // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
}

function clearDeliveryForm() {
    deliveryAddress.value = '';
    deliveryVolume.value = '1.0';
    deliveryTime.value = '15';
    addressCoordinates.textContent = '';
    addressError.textContent = '';
}

// –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
async function handleAddressBlur() {
    const address = deliveryAddress.value.trim();
    if (!address) return;

    if (geocodedAddresses[address]) {
        displayCoordinates(geocodedAddresses[address]);
        return;
    }

    try {
        showAddressLoading();
        const coordinates = await geocodeAddress(address);
        geocodedAddresses[address] = coordinates;
        displayCoordinates(coordinates);
        clearAddressError();
    } catch (error) {
        showAddressError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞');
        addressCoordinates.textContent = '';
    }
}

function showAddressLoading() {
    addressCoordinates.textContent = '–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...';
    addressCoordinates.style.color = '#718096';
}

function displayCoordinates(coordinates) {
    addressCoordinates.textContent = `üìç ${coordinates}`;
    addressCoordinates.style.color = '#38a169';
}

function showAddressError(message) {
    addressError.textContent = message;
}

function clearAddressError() {
    addressError.textContent = '';
}

async function geocodeAddress(address) {
    const response = await fetch('/api/geocode', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ address }),
    });

    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    const data = await response.json();
    return data.coordinates;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏
async function saveDelivery() {
    const address = deliveryAddress.value.trim();
    const volume = parseFloat(deliveryVolume.value);
    const timeAtPoint = parseInt(deliveryTime.value);

    if (!address || !geocodedAddresses[address] || volume <= 0 || timeAtPoint <= 0) {
        showAddressError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
        return;
    }

    const newDeliveryData = {
        // id –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º
        address: address,
        coordinates: geocodedAddresses[address],
        status: 'pending',
        volume: volume,
        timeAtPoint: timeAtPoint,
        routeId: null
    };

    try {
        showLoader('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        const response = await fetch('/api/deliveries', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newDeliveryData),
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        
        const savedDelivery = await response.json(); // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Å ID

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
        const emptyStateRow = deliveriesTbody.querySelector('.empty-state');
        if (emptyStateRow) {
            emptyStateRow.parentElement.innerHTML = ''; // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ
        }
        const newRow = createDeliveryRow(savedDelivery);
        deliveriesTbody.appendChild(newRow);
        
        hideLoader();
        closeModal(deliveryModal);
        updateUI();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        hideLoader();
        alert(error.message);
    }
}

function renderDeliveriesTable(deliveries) {
    deliveriesTbody.innerHTML = '';

    if (!deliveries || deliveries.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td colspan="8" class="empty-state">
                <span class="empty-state-icon">üì¶</span>
                <h3>–î–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç–∞–≤–∫—É</p>
            </td>
        `;
        deliveriesTbody.appendChild(emptyRow);
        return;
    }

    deliveries.forEach(delivery => {
        const row = createDeliveryRow(delivery);
        deliveriesTbody.appendChild(row);
    });
    // –ü–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å–æ–≤
    updateSelectionState(deliveries);
}

function createDeliveryRow(delivery) {
    const row = document.createElement('tr');
    row.dataset.deliveryId = delivery.id;

    const statusBadge = getStatusBadge(delivery.status);
    const routeCell = delivery.routeId 
        ? `<a href="https://yandex.ru/maps/?rtext=${delivery.address}" target="_blank" class="route-link" data-route-id="${delivery.routeId}">‚Ññ${delivery.routeId}</a>` 
        : '‚Äî';

    row.innerHTML = `
        <td>
            <input type="checkbox" class="delivery-checkbox" data-delivery-id="${delivery.id}" onchange="updateSelectionState()">
        </td>
        <td class="delivery-number">${delivery.id}</td>
        <td title="${delivery.address}">${truncateText(delivery.address, 40)}</td>
        <td class="coordinates-display">${delivery.coordinates}</td>
        <td>${statusBadge}</td>
        <td>${delivery.volume} –º¬≥</td>
        <td>${delivery.timeAtPoint} –º–∏–Ω</td>
        <td>${routeCell}</td>
    `;

    return row;
}

function getStatusBadge(status) {
    const statusLabels = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'ready': '–ì–æ—Ç–æ–≤',
        'in-route': '–í –ø—É—Ç–∏',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
    };

    return `<span class="status-badge status-${status}">${statusLabels[status]}</span>`;
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º
function toggleSelectAll() {
    const checkboxes = document.querySelectorAll('.delivery-checkbox');
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
    });
    updateSelectionState();
}

function updateSelectionState(deliveries) { // deliveries –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
    const checkboxes = document.querySelectorAll('.delivery-checkbox');
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < checkboxes.length;
    selectAllCheckbox.checked = checkedBoxes.length === checkboxes.length && checkboxes.length > 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    selectedCount.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${checkedBoxes.length} –¥–æ—Å—Ç–∞–≤–æ–∫`;

    // –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimizeRouteBtn.disabled = checkedBoxes.length < 1;
    deleteDeliveriesBtn.disabled = checkedBoxes.length === 0;

    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    checkboxes.forEach(checkbox => {
        const row = checkbox.closest('tr');
        if (checkbox.checked) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    });
}

function updateUI() {
    updateSelectionState();
}

async function handleDeleteSelected() {
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');
    if (checkedBoxes.length === 0) {
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${checkedBoxes.length} –¥–æ—Å—Ç–∞–≤–æ–∫?`)) {
        return;
    }
    
    const idsToDelete = Array.from(checkedBoxes).map(cb => parseInt(cb.closest('tr').dataset.deliveryId));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–æ–∫–µ—Ç
    // const socket = io(); // –£–¥–∞–ª—è–µ–º, —ç—Ç–æ –±—ã–ª–æ –æ—à–∏–±–∫–æ–π
    socket.emit('delete_deliveries', idsToDelete);
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
async function optimizeSelectedRoute() {
    const checkedBoxes = document.querySelectorAll('.delivery-checkbox:checked');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const response = await fetch('/api/deliveries');
    const deliveries = await response.json();

    const selectedDeliveries = Array.from(checkedBoxes).map(checkbox => {
        const deliveryId = parseInt(checkbox.dataset.deliveryId);
        return deliveries.find(d => d.id === deliveryId);
    }).filter(d => d); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ null

    if (selectedDeliveries.length < 1) { // –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        return;
    }

    try {
        showLoader('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞...');

        const routeData = await optimizeRoute(selectedDeliveries);
        
        // –ë–æ–ª—å—à–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        
        currentRouteData = {
            ...routeData,
            // routeId –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º
            deliveryIds: selectedDeliveries.map(d => d.id), // –ü–µ—Ä–µ–¥–∞–µ–º ID –¥–æ—Å—Ç–∞–≤–æ–∫
            deliveries: selectedDeliveries
        };

        hideLoader();
        showRouteResults(currentRouteData);
        updateUI();

    } catch (error) {
        hideLoader();
        showRouteError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ' + error.message);
    }
}

async function optimizeRoute(selectedDeliveries) {
    const addresses = selectedDeliveries.map(d => d.address);
    const coordinates = selectedDeliveries.map(d => d.coordinates);

    const response = await fetch('/api/optimize-route', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ addresses, coordinates }),
    });

    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
    }

    return await response.json();
}

function showRouteResults(routeData) {
    // routeNumber.textContent = `‚Ññ${routeData.routeId}`; // –£–¥–∞–ª—è–µ–º, —Ç.–∫. ID –µ—â–µ –Ω–µ—Ç
    routeNumber.textContent = '–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç';
    deliveriesCount.textContent = routeData.deliveries.length;
    totalDistance.textContent = routeData.totalDistance.text;
    totalDuration.textContent = routeData.totalDuration.text;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    routeStepsList.innerHTML = '';
    routeData.orderedAddresses.forEach((address, index) => {
        const step = document.createElement('div');
        step.className = 'route-step';
        step.textContent = `${index + 1}. ${address}`;
        routeStepsList.appendChild(step);
    });

    routeError.textContent = '';
    openModal(routeModal);
}

function showRouteError(message) {
    routeError.textContent = message;
    openModal(routeModal);
}

// –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞–º–∏
function openRouteInYandexMaps(routeId) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    // –î–ª—è –ø–æ–ø–∞–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è yandexMapsUrl –∏–∑ currentRouteData
    if (routeId && typeof routeId === 'string') {
        const route = findRouteById(routeId); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        if (route && route.yandexMapsUrl) {
            window.open(route.yandexMapsUrl, '_blank');
        }
    } else {
        if (currentRouteData && currentRouteData.yandexMapsUrl) {
            window.open(currentRouteData.yandexMapsUrl, '_blank');
        }
    }
}

// copyRouteLinkBtn.addEventListener('click', copyRouteLink); // –£–¥–∞–ª—è–µ–º

function findRouteById(routeId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if (currentRouteData && currentRouteData.routeId == routeId) {
        return currentRouteData;
    }
    return null;
}

function handleCreateRoute() {
    if (!currentRouteData) return;
    
    socket.emit('create_route', {
        deliveryIds: currentRouteData.deliveryIds,
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    });
    
    closeModal(routeModal);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoader(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    loader.querySelector('p').textContent = message;
    loader.classList.remove('hidden');
}

function hideLoader() {
    loader.classList.add('hidden');
} 