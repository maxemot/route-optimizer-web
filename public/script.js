// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let addressCounter = 2;
let geocodedAddresses = new Map(); // –ö—ç—à –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    setupAddressListeners();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    document.addEventListener('input', checkFormReadiness);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –∞–¥—Ä–µ—Å–æ–≤
function setupAddressListeners() {
    const allInputs = document.querySelectorAll('input[type="text"]');
    allInputs.forEach(input => {
        // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        input.addEventListener('blur', handleAddressBlur);
        
        // –°–±—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
        input.addEventListener('input', handleAddressInput);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
function handleAddressInput(event) {
    const input = event.target;
    const coordsId = getCoordinatesId(input.id);
    const coordsDisplay = document.getElementById(coordsId);
    const inputGroup = input.closest('.address-input-group');
    
    if (coordsDisplay) {
        coordsDisplay.style.display = 'none';
        coordsDisplay.textContent = '';
        inputGroup.classList.remove('has-coordinates');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
async function handleAddressBlur(event) {
    const input = event.target;
    const address = input.value.trim();
    
    if (!address) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (geocodedAddresses.has(address)) {
        displayCoordinates(input, geocodedAddresses.get(address));
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingForInput(input, true);
    
    try {
        const response = await fetch('/api/geocode', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ address: address })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            geocodedAddresses.set(address, data);
            displayCoordinates(input, data);
        } else {
            showErrorForInput(input, data.error);
        }
    } catch (error) {
        showErrorForInput(input, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
        showLoadingForInput(input, false);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function displayCoordinates(input, data) {
    const coordsId = getCoordinatesId(input.id);
    const coordsDisplay = document.getElementById(coordsId);
    const inputGroup = input.closest('.address-input-group');
    
    if (coordsDisplay) {
        coordsDisplay.textContent = `üìç ${data.latitude.toFixed(6)}, ${data.longitude.toFixed(6)}`;
        coordsDisplay.style.display = 'block';
        coordsDisplay.classList.add('visible');
        inputGroup.classList.add('has-coordinates');
    }
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
function showErrorForInput(input, errorMessage) {
    const coordsId = getCoordinatesId(input.id);
    const coordsDisplay = document.getElementById(coordsId);
    const inputGroup = input.closest('.address-input-group');
    
    if (coordsDisplay) {
        coordsDisplay.textContent = `‚ùå ${errorMessage}`;
        coordsDisplay.style.display = 'block';
        coordsDisplay.style.color = '#dc3545';
        inputGroup.classList.remove('has-coordinates');
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingForInput(input, show) {
    const coordsId = getCoordinatesId(input.id);
    const coordsDisplay = document.getElementById(coordsId);
    
    if (coordsDisplay) {
        if (show) {
            coordsDisplay.textContent = 'üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...';
            coordsDisplay.style.display = 'block';
            coordsDisplay.style.color = '#667eea';
        } else {
            coordsDisplay.style.color = '#666';
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function getCoordinatesId(inputId) {
    if (inputId === 'start-address') {
        return 'start-coords';
    }
    return inputId.replace('address', 'coords');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
function addAddress() {
    addressCounter++;
    const container = document.getElementById('additional-addresses');
    
    const newAddressGroup = document.createElement('div');
    newAddressGroup.className = 'address-input-group fade-in';
    newAddressGroup.innerHTML = `
        <label for="address-${addressCounter}">–ê–¥—Ä–µ—Å ${addressCounter}:</label>
        <input type="text" id="address-${addressCounter}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å">
        <div class="coordinates-display" id="coords-${addressCounter}"></div>
        <button type="button" class="remove-address" onclick="removeAddress(${addressCounter})">‚úï</button>
    `;
    
    container.appendChild(newAddressGroup);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
    const newInput = newAddressGroup.querySelector('input');
    newInput.addEventListener('blur', handleAddressBlur);
    newInput.addEventListener('input', handleAddressInput);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–º –ø–æ–ª–µ
    newInput.focus();
    
    checkFormReadiness();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
function removeAddress(addressNumber) {
    const addressGroup = document.querySelector(`#address-${addressNumber}`).closest('.address-input-group');
    addressGroup.remove();
    checkFormReadiness();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
function checkFormReadiness() {
    const inputs = document.querySelectorAll('input[type="text"]');
    const filledInputs = Array.from(inputs).filter(input => input.value.trim() !== '');
    const optimizeBtn = document.getElementById('optimize-btn');
    
    // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞ (–Ω–∞—á–∞–ª—å–Ω—ã–π + 1)
    if (filledInputs.length >= 2) {
        optimizeBtn.disabled = false;
    } else {
        optimizeBtn.disabled = true;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
async function optimizeRoute() {
    const inputs = document.querySelectorAll('input[type="text"]');
    const addresses = [];
    const coordinates = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for (const input of inputs) {
        const address = input.value.trim();
        if (!address) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (!geocodedAddresses.has(address)) {
            alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞: "${address}"`);
            input.focus();
            return;
        }
        
        addresses.push(address);
        coordinates.push(geocodedAddresses.get(address).coordinates);
    }
    
    if (addresses.length < 2) {
        alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –∞–¥—Ä–µ—Å–∞');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ª–æ–∞–¥–µ—Ä–æ–º
    const resultSection = document.getElementById('result-section');
    const loader = document.getElementById('loader');
    const results = document.getElementById('results');
    const error = document.getElementById('error');
    
    resultSection.style.display = 'block';
    loader.style.display = 'block';
    results.style.display = 'none';
    error.style.display = 'none';
    
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    resultSection.scrollIntoView({ behavior: 'smooth' });
    
    try {
        const response = await fetch('/api/optimize-route', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                addresses: addresses,
                coordinates: coordinates
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showResults(data);
        } else {
            showError(data.error);
        }
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults(result) {
    const loader = document.getElementById('loader');
    const results = document.getElementById('results');
    
    loader.style.display = 'none';
    results.style.display = 'block';
    results.classList.add('fade-in');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    const routeContainer = document.getElementById('route-steps');
    routeContainer.innerHTML = '';
    
    result.orderedAddresses.forEach((address, index) => {
        const tag = document.createElement('div');
        tag.className = 'address-tag';
        tag.textContent = address;
        routeContainer.appendChild(tag);
        
        if (index < result.orderedAddresses.length - 1) {
            const arrow = document.createElement('div');
            arrow.className = 'arrow';
            arrow.textContent = '‚Üì';
            routeContainer.appendChild(arrow);
        }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    document.getElementById('total-distance').textContent = '–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + result.totalDistance.text;
    document.getElementById('total-duration').textContent = '–û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: ' + result.totalDuration.text;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const openLinkBtn = document.getElementById('open-link-btn');
    const copyLinkBtn = document.getElementById('copy-link-btn');
    
    openLinkBtn.href = result.yandexMapsUrl;
    copyLinkBtn.onclick = () => copyToClipboard(result.yandexMapsUrl);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
function showError(errorMessage) {
    const loader = document.getElementById('loader');
    const error = document.getElementById('error');
    
    loader.style.display = 'none';
    error.style.display = 'block';
    error.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + errorMessage;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        
        const status = document.getElementById('copy-status');
        status.textContent = '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!';
        status.classList.add('visible');
        
        setTimeout(() => {
            status.classList.remove('visible');
        }, 2000);
    } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ', err);
        
        const status = document.getElementById('copy-status');
        status.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.';
        status.style.color = '#dc3545';
        status.classList.add('visible');
        
        setTimeout(() => {
            status.classList.remove('visible');
            status.style.color = '#28a745';
        }, 3000);
    }
} 