/**
 * @OnlyCurrentDoc
 *
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è (—Ä–µ—à–µ–Ω–∏–µ "–∑–∞–¥–∞—á–∏ –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞")
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç.
 *
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–¥–µ–ª—è–µ—Ç —è—á–µ–π–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –≤ Google –¢–∞–±–ª–∏—Ü–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ –º–µ–Ω—é,
 * –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ
 * —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.
 */

// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á API, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –∫–∞–±–∏–Ω–µ—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ø–Ω–¥–µ–∫—Å.
const API_KEY = "7726ddb0-76da-4747-8007-d84dfe2fb93f";
const GEOCODER_URL = "https://geocode-maps.yandex.ru/1.x/";
// const DISTANCE_MATRIX_URL = "https://api.routing.yandex.net/v2/distancematrix"; // –£–¥–∞–ª—è–µ–º, —Ç.–∫. –ú–∞—Ç—Ä–∏—Ü–∞ –Ø–Ω–¥–µ–∫—Å–∞ –ø–ª–∞—Ç–Ω–∞—è

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Google –¢–∞–±–ª–∏—Ü –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üöö –ú–∞—Ä—à—Ä—É—Ç—ã')
    .addItem('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç', 'thisistheway_wrapper')
    .addToUi();
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç HTML-–¥–∏–∞–ª–æ–≥.
 */
function thisistheway_wrapper() {
  const htmlOutput = HtmlService.createHtmlOutputFromFile('dialog.html')
      .setWidth(400)
      .setHeight(450);
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, '–†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞');
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É: —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –≤—ã–∑—ã–≤–∞–µ—Ç API
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è HTML-—Å–µ—Ä–≤–∏—Å–∞.
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript –≤ —Ñ–∞–π–ª–µ dialog.html
 * @returns {object} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
function calculateAndGetRoute() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const range = sheet.getActiveRange();
    
    if (!range) {
      throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —è—á–µ–π–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏.');
    }

    if (range.getWidth() !== 1) {
      throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ.');
    }

    const addressValues = range.getValues();
    const firstRow = range.getRow();
    const coordsCol = range.getColumn() + 1;

    const addresses = [];
    const coords = [];

    for (let i = 0; i < addressValues.length; i++) {
        const address = String(addressValues[i][0]).trim();
        if (address === '') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤—ã–¥–µ–ª–µ–Ω–∏–∏

        const coordCell = sheet.getRange(firstRow + i, coordsCol);
        let coordValue = String(coordCell.getValue()).trim();

        if (coordValue !== '') {
            coords.push(coordValue);
            addresses.push(address);
        } else {
            Logger.log(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è "${address}" –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API...`);
            try {
                const newCoord = getSingleCoordinateFromYandex(address);
                coordCell.setValue(newCoord);
                coords.push(newCoord);
                addresses.push(address);
            } catch (e) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ "${address}". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: ${e.message}`);
            }
        }
    }
    
    SpreadsheetApp.flush(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ

    if (addresses.length < 2) {
      throw new Error('–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∞–¥—Ä–µ—Å–∞.');
    }
    
    if (addresses.length > 10) {
      Logger.log(`–í–Ω–∏–º–∞–Ω–∏–µ: –†–∞—Å—á–µ—Ç –¥–ª—è ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.`);
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
    return thisistheway(addresses, coords);

  } catch (e) {
    Logger.log(e.stack);
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ
    throw new Error(e.message);
  }
}


/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
 * @param {string[]} addresses –ú–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤. –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞.
 * @param {string[]} coords –ì–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —ç—Ç–∏—Ö –∞–¥—Ä–µ—Å–æ–≤.
 * @returns {{orderedAddresses: string[], totalDistance: object, totalDuration: object, yandexMapsUrl: string}}
 */
function thisistheway(addresses, coords) {
  // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ calculateAndGetRoute.

  // 2. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å Google Maps.
  const matrixData = getDistanceMatrixFromGoogle(coords);

  // 3. –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ (–Ω–∞—Ö–æ–¥–∏–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å).
  const routeResult = solveTsp(matrixData.duration, matrixData.distance);
  
  // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
  const startAddress = addresses[0];
  const orderedAddresses = [startAddress];
  routeResult.path.forEach(index => {
    orderedAddresses.push(addresses[index]);
  });
  orderedAddresses.push(startAddress); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –≤ –∫–æ–Ω–µ—Ü, —Ç.–∫. –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.
  
  const yandexMapsUrl = 'https://yandex.ru/maps/?rtext=' + orderedAddresses.map(encodeURIComponent).join('~') + '&rtt=auto';

  return {
    orderedAddresses: orderedAddresses,
    totalDistance: formatDistance(routeResult.distance),
    totalDuration: formatDuration(routeResult.duration),
    yandexMapsUrl: yandexMapsUrl,
  };
}


/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –û–î–ò–ù –∞–¥—Ä–µ—Å –≤ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞ —à–∏—Ä–æ—Ç–∞) —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä.
 * @param {string} address –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @returns {string} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–æ–ª–≥–æ—Ç–∞ —à–∏—Ä–æ—Ç–∞".
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
 */
function getSingleCoordinateFromYandex(address) {
    const params = {
      'apikey': API_KEY,
      'geocode': address,
      'format': 'json',
      'results': 1
    };
    const url = GEOCODER_URL + '?' + Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');
    const response = UrlFetchApp.fetch(url, {'muteHttpExceptions': true});
    const json = JSON.parse(response.getContentText());

    if (response.getResponseCode() !== 200 || !json.response.GeoObjectCollection.featureMember.length) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: "${address}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`);
    }

    // –Ø–Ω–¥–µ–∫—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "–¥–æ–ª–≥–æ—Ç–∞ —à–∏—Ä–æ—Ç–∞"
    const point = json.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
    return point;
}


/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å Google Maps.
 * @param {string[]} coords –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–æ–ª–≥–æ—Ç–∞ —à–∏—Ä–æ—Ç–∞" (–∏–∑ –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä–∞).
 * @returns {{distance: number[][], duration: number[][]}} –ú–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–≤ –º–µ—Ç—Ä–∞—Ö) –∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
 */
function getDistanceMatrixFromGoogle(coords) {
  const n = coords.length;
  const distanceMatrix = Array(n).fill(0).map(() => Array(n).fill(Infinity));
  const durationMatrix = Array(n).fill(0).map(() => Array(n).fill(Infinity));

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      if (i === j) {
        distanceMatrix[i][j] = 0;
        durationMatrix[i][j] = 0;
        continue;
      }
      
      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä–∞ –∏–¥—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–æ–ª–≥–æ—Ç–∞ —à–∏—Ä–æ—Ç–∞" (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
      // –°–µ—Ä–≤–∏—Å Google Maps –æ–∂–∏–¥–∞–µ—Ç "—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞" (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ú–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏.
      const origin = coords[i].split(' ').reverse().join(',');
      const destination = coords[j].split(' ').reverse().join(',');

      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –∫–≤–æ—Ç—ã Google –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤.
        Utilities.sleep(100); 
        
        const directions = Maps.newDirectionFinder()
          .setOrigin(origin)
          .setDestination(destination)
          .setMode(Maps.DirectionFinder.Mode.DRIVING)
          .getDirections();

        if (directions && directions.routes && directions.routes.length > 0) {
          const leg = directions.routes[0].legs[0];
          if (leg) {
            const distanceValue = leg.distance.value; // –º–µ—Ç—Ä—ã
            const durationValue = leg.duration.value; // —Å–µ–∫—É–Ω–¥—ã

            distanceMatrix[i][j] = distanceValue;
            durationMatrix[i][j] = durationValue;
          }
        } else {
             Logger.log(`[Google] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ ${i} (${origin}) –∏ ${j} (${destination}).`);
        }
      } catch (e) {
        Logger.log(`[Google] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É ${i} –∏ ${j}: ${e.toString()}`);
        // –û—Å—Ç–∞–≤–ª—è–µ–º Infinity –≤ –º–∞—Ç—Ä–∏—Ü–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
      }
    }
  }
  
  return { distance: distanceMatrix, duration: durationMatrix };
}


/**
 * –†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ –º–µ—Ç–æ–¥–æ–º –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫.
 * @param {number[][]} timeMatrix –ú–∞—Ç—Ä–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏.
 * @param {number[][]} distanceMatrix –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π.
 * @returns {{path: number[], duration: number, distance: number}} –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
 */
function solveTsp(timeMatrix, distanceMatrix) {
  const n = timeMatrix.length;
  const waypointIndices = Array.from({length: n - 1}, (_, i) => i + 1);

  if (n <= 2) { // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç –∏ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
     const path = n > 1 ? [1] : [];
     const duration = n > 1 ? timeMatrix[0][1] + timeMatrix[1][0] : 0;
     const distance = n > 1 ? distanceMatrix[0][1] + distanceMatrix[1][0] : 0;
     return { path, duration, distance };
  }

  const permutations = getPermutations(waypointIndices);
  
  let bestPath = [];
  let minDuration = Infinity;

  for (const p of permutations) {
    let currentDuration = timeMatrix[0][p[0]]; // –û—Ç —Å—Ç–∞—Ä—Ç–∞ (0) –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    
    for (let i = 0; i < p.length - 1; i++) {
      currentDuration += timeMatrix[p[i]][p[i+1]];
    }
    
    currentDuration += timeMatrix[p[p.length - 1]][0]; // –û—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞ (0)

    if (currentDuration < minDuration) {
      minDuration = currentDuration;
      bestPath = p;
    }
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  let bestDistance = distanceMatrix[0][bestPath[0]];
  for (let i = 0; i < bestPath.length - 1; i++) {
    bestDistance += distanceMatrix[bestPath[i]][bestPath[i+1]];
  }
  bestDistance += distanceMatrix[bestPath[bestPath.length - 1]][0];

  if (minDuration === Infinity) {
    throw new Error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–Ω–∞ –∏–∑ —Ç–æ—á–µ–∫ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
  }
  
  return { path: bestPath, duration: minDuration, distance: bestDistance };
}

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.
 * @param {any[]} inputArray –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤.
 * @returns {any[][]} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫.
 */
function getPermutations(inputArray) {
  const result = [];
  function permute(arr, memo = []) {
    if (arr.length === 0) {
      result.push(memo);
    } else {
      for (let i = 0; i < arr.length; i++) {
        const curr = arr.slice();
        const next = curr.splice(i, 1);
        permute(curr.slice(), memo.concat(next));
      }
    }
  }
  permute(inputArray);
  return result;
}


/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–µ—Ç—Ä—ã) –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–∫–º).
 */
function formatDistance(meters) {
    return {
        value: meters,
        text: (meters / 1000).toFixed(1) + ' –∫–º'
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã) –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã).
 */
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    let text = '';
    if (hours > 0) text += `${hours} —á `;
    if (minutes > 0) text += `${minutes} –º–∏–Ω`;
    return {
        value: seconds,
        text: text.trim() || '–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã'
    };
} 