const express = require('express');
const cors = require('cors');
const path = require('path');
const fetch = require('node-fetch');
const { kv } = require('@vercel/kv');
const http = require('http');
const { Server } = require("socket.io");

// +++ –ù–û–í–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò +++
const formatDeliveryId = (id) => `–î-${String(id).padStart(4, '0')}`;
const formatRouteId = (id) => `–ú-${String(id).padStart(4, '0')}`;
const parseId = (formattedId) => parseInt(formattedId.split('-')[1], 10);

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

const YANDEX_API_KEY = process.env.YANDEX_API_KEY || "7726ddb0-76da-4747-8007-d84dfe2fb93f";
const GEOCODER_URL = "https://geocode-maps.yandex.ru/1.x/";
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'public'
app.use(express.static(path.join(__dirname, 'public')));

io.on('connection', (socket) => {
    console.log('üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ WebSocket');
    
    socket.on('delete_deliveries', async (ids) => {
        try {
            // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID ("–î-xxxx") –≤ —á–∏—Å–ª–æ–≤—ã–µ
            const numericIds = ids.map(id => parseId(id));
            if (numericIds.some(isNaN)) {
                throw new Error("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            }

            const deliveries = await kv.get('deliveries') || [];
            const updatedDeliveries = deliveries.filter(d => !numericIds.includes(d.id));
            await kv.set('deliveries', updatedDeliveries);

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å ID: ${numericIds.join(', ')}`);
            io.emit('deliveries_deleted', ids); // –û–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª –∫–ª–∏–µ–Ω—Ç
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
            socket.emit('delete_error', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
    });

    socket.on('disconnect', () => {
        console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
    });
});

app.post('/api/routes', async (req, res) => {
    try {
        const { deliveryIds, orderedAddresses, totalDistance, totalDuration, yandexMapsUrl } = req.body;
        if (!deliveryIds || deliveryIds.length === 0) {
            return res.status(400).json({ error: '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã ID –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞' });
        }

        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ —á–∏—Å–ª–æ–≤—ã–µ ---
        const numericDeliveryIds = deliveryIds.map(id => parseId(id));
        if (numericDeliveryIds.some(isNaN)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ—Å—Ç–∞–≤–∫–∏' });
        }

        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)
        const routeId = await kv.incr('nextRouteId');

        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º –º–∞—Ä—à—Ä—É—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ß–ò–°–õ–û–í–´–ú–ò ID –¥–æ—Å—Ç–∞–≤–æ–∫
        const newRoute = { id: routeId, deliveryIds: numericDeliveryIds, orderedAddresses, totalDistance, totalDuration, yandexMapsUrl, createdAt: new Date().toISOString() };
        const routes = await kv.get('routes') || [];
        await kv.set('routes', [...routes, newRoute]);

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è—è –∏–º —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
        const deliveries = await kv.get('deliveries') || [];
        const deliveriesToUpdate = [];
        const allOtherDeliveries = [];

        deliveries.forEach(d => {
            // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ —á–∏—Å–ª–æ–≤—ã—Ö ID –¥–ª—è –ø–æ–∏—Å–∫–∞ ---
            if (numericDeliveryIds.includes(d.id)) {
                deliveriesToUpdate.push({ ...d, routeId: routeId, status: 'ready' });
            } else {
                allOtherDeliveries.push(d);
            }
        });

        await kv.set('deliveries', [...allOtherDeliveries, ...deliveriesToUpdate]);
        
        // 4. –û–ø–æ–≤–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const formattedDeliveriesToUpdate = deliveriesToUpdate.map(d => ({
            ...d,
            id: formatDeliveryId(d.id),
            routeId: d.routeId ? formatRouteId(d.routeId) : null
        }));
        io.emit('deliveries_updated', formattedDeliveriesToUpdate);
        console.log(`üó∫Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç #${routeId} –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫: ${numericDeliveryIds.join(', ')}`);

        // –û—Ç–¥–∞–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç —Ç–æ–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        res.status(201).json({
            ...newRoute,
            id: formatRouteId(newRoute.id)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç' });
    }
});

app.get('/api/routes/:id', async (req, res) => {
    try {
        const { id } = req.params; // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ú-0003"
        const numericId = parseId(id); // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ 3
        if (isNaN(numericId)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –º–∞—Ä—à—Ä—É—Ç–∞' });
        }

        const routes = await kv.get('routes') || [];
        const route = routes.find(r => r.id === numericId);

        if (route) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è ID –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
            res.json({
                ...route,
                id: formatRouteId(route.id)
            });
        } else {
            res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç' });
    }
});


app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/readme', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'readme.html'));
});

app.get('/api/deliveries', async (req, res) => {
    try {
        const deliveries = await kv.get('deliveries') || [];
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç
        const formattedDeliveries = deliveries.map(d => ({
            ...d,
            id: formatDeliveryId(d.id),
            routeId: d.routeId ? formatRouteId(d.routeId) : null
        }));
        res.json(formattedDeliveries);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ KV:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏' });
    }
});

app.post('/api/deliveries', async (req, res) => {
    try {
        const newDelivery = req.body;
        if (!newDelivery || !newDelivery.address || !newDelivery.coordinates) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏' });
        }

        const deliveries = await kv.get('deliveries') || [];
        const nextId = (await kv.get('nextDeliveryId')) || 1;
        newDelivery.id = nextId;
        
        const updatedDeliveries = [...deliveries, newDelivery];
        
        await kv.set('deliveries', updatedDeliveries);
        await kv.set('nextDeliveryId', nextId + 1);
        
        console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: #${newDelivery.id} ${newDelivery.address}`);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ WebSocket
        const formattedDelivery = {
            ...newDelivery,
            id: formatDeliveryId(newDelivery.id)
        };
        io.emit('new_delivery', formattedDelivery);
        res.status(201).json(formattedDelivery);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ KV:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É' });
    }
});

app.get('/api/release-time', async (req, res) => {
    try {
        const releaseTime = await kv.get('releaseTime') || new Date().toISOString();
        const date = new Date(releaseTime);
        const mskDate = new Date(date.getTime() + (3 * 60 * 60 * 1000));
        const day = String(mskDate.getUTCDate()).padStart(2, '0');
        const month = String(mskDate.getUTCMonth() + 1).padStart(2, '0');
        const hours = String(mskDate.getUTCHours()).padStart(2, '0');
        const minutes = String(mskDate.getUTCMinutes()).padStart(2, '0');
        const seconds = String(mskDate.getUTCSeconds()).padStart(2, '0');
        const formattedTime = `${day}.${month} ${hours}:${minutes}:${seconds}`;
    
        res.json({ 
            releaseTime: formattedTime,
            timestamp: releaseTime
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–ª–∏–∑–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–ª–∏–∑–∞' });
    }
});

app.post('/api/geocode', async (req, res) => {
    try {
        const { address } = req.body;
        if (!address) return res.status(400).json({ error: '–ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        const params = new URLSearchParams({ apikey: YANDEX_API_KEY, geocode: address, format: 'json', results: 1 });
        const response = await fetch(`${GEOCODER_URL}?${params}`);
        if (!response.ok) throw new Error(`Yandex API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        const data = await response.json();
        if (!data.response?.GeoObjectCollection?.featureMember?.length) return res.status(404).json({ error: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        const geoObject = data.response.GeoObjectCollection.featureMember[0].GeoObject;
        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: ${geoObject.Point.pos}`);
        res.json({ coordinates: geoObject.Point.pos, fullAddress: geoObject.metaDataProperty.GeocoderMetaData.text });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞' });
    }
});

app.post('/api/optimize-route', async (req, res) => {
    try {
        const { deliveryIds } = req.body; // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö ID ("–î-xxxx")
        if (!deliveryIds || deliveryIds.length < 1) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º 1 –∞–¥—Ä–µ—Å' });
        }

        const numericDeliveryIds = deliveryIds.map(id => parseId(id));
        if (numericDeliveryIds.some(isNaN)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ—Å—Ç–∞–≤–∫–∏' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ —á–∏—Å–ª–æ–≤—ã–º ID
        const allDeliveries = await kv.get('deliveries') || [];
        const selectedDeliveries = allDeliveries.filter(d => numericDeliveryIds.includes(d.id));

        if (selectedDeliveries.length !== numericDeliveryIds.length) {
             return res.status(404).json({ error: '–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ' });
        }

        let addresses = selectedDeliveries.map(d => d.address);
        let coordinates = selectedDeliveries.map(d => d.coordinates);
        
        const startPoint = { address: "–ü–æ–ø–æ–≤–∫–∞, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., 141892", coordinates: "37.298805 56.150459" };
        addresses.unshift(startPoint.address);
        coordinates.unshift(startPoint.coordinates);

        console.log(`üöó –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è ${addresses.length} —Ç–æ—á–µ–∫ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à):`);
        addresses.forEach((addr, i) => console.log(`  ${i}. ${addr} (${coordinates[i]})`));

        const distanceMatrix = await calculateMockDistanceMatrix(coordinates);
        const solution = solveTsp(distanceMatrix.duration, distanceMatrix.distance);
        
        const orderedAddresses = [addresses[0]];
        solution.path.forEach(index => { orderedAddresses.push(addresses[index]); });
        orderedAddresses.push(addresses[0]);
        
        const yandexMapsUrl = 'https://yandex.ru/maps/?rtext=' + orderedAddresses.map(addr => encodeURIComponent(addr)).join('~') + '&rtt=auto';

        const result = {
            orderedAddresses,
            totalDistance: formatDistance(solution.distance),
            totalDuration: formatDuration(solution.duration),
            yandexMapsUrl,
            calculatedAt: new Date().toISOString(),
            deliveryIds: deliveryIds // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID
        };

        console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${result.totalDistance.text}, ${result.totalDuration.text}`);
        res.json(result);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞' });
    }
});

async function calculateMockDistanceMatrix(coordinates) {
    const n = coordinates.length;
    const distanceMatrix = Array(n).fill(0).map(() => Array(n).fill(Infinity));
    const durationMatrix = Array(n).fill(0).map(() => Array(n).fill(Infinity));
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (i === j) {
                distanceMatrix[i][j] = 0;
                durationMatrix[i][j] = 0;
                continue;
            }
            const coord1 = coordinates[i].split(' ').map(parseFloat);
            const coord2 = coordinates[j].split(' ').map(parseFloat);
            const distance = calculateStraightDistance(coord1[1], coord1[0], coord2[1], coord2[0]);
            distanceMatrix[i][j] = distance;
            durationMatrix[i][j] = Math.round(distance / 16.67); // ~60 km/h –≤ –º/—Å
        }
    }
    return { distance: distanceMatrix, duration: durationMatrix };
}

function calculateStraightDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // Radius of the earth in m
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
}

function solveTsp(timeMatrix, distanceMatrix) {
    const n = timeMatrix.length;
    if (n <= 1) return { path: [], duration: 0, distance: 0 };
    const waypointIndices = Array.from({length: n - 1}, (_, i) => i + 1);
    if (n === 2) return { path: [1], duration: timeMatrix[0][1] + timeMatrix[1][0], distance: distanceMatrix[0][1] + distanceMatrix[1][0] };

    const permutations = getPermutations(waypointIndices);
    let bestPath = [], minDuration = Infinity;

    for (const p of permutations) {
        let currentDuration = timeMatrix[0][p[0]];
        for (let i = 0; i < p.length - 1; i++) { currentDuration += timeMatrix[p[i]][p[i+1]]; }
        currentDuration += timeMatrix[p[p.length - 1]][0];
        if (currentDuration < minDuration) {
            minDuration = currentDuration;
            bestPath = p;
        }
    }
    let bestDistance = distanceMatrix[0][bestPath[0]];
    for (let i = 0; i < bestPath.length - 1; i++) { bestDistance += distanceMatrix[bestPath[i]][bestPath[i+1]]; }
    bestDistance += distanceMatrix[bestPath[bestPath.length - 1]][0];
    if (minDuration === Infinity) {
        throw new Error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç");
    }
    return { path: bestPath, duration: minDuration, distance: bestDistance };
}

function getPermutations(inputArray) {
    const result = [];
    const permute = (arr, memo = []) => {
        if (arr.length === 0) { result.push(memo); } 
        else {
            for (let i = 0; i < arr.length; i++) {
                let curr = arr.slice();
                let next = curr.splice(i, 1);
                permute(curr.slice(), memo.concat(next));
            }
        }
    };
    permute(inputArray);
    return result;
}

function formatDistance(meters) {
    return { value: meters, text: (meters / 1000).toFixed(1) + ' –∫–º' };
}

function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    let text = '';
    if (hours > 0) text += `${hours} —á `;
    if (minutes > 0) text += `${minutes} –º–∏–Ω`;
    return { value: seconds, text: text.trim() || '–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã' };
}

/*
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
*/

module.exports = server;