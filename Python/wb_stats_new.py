import requests
import json
import time
import csv
import os
from datetime import datetime, timedelta

# API-–∫–ª—é—á –∏–∑ wb_orders_direct.py
API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjUwNTIwdjEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc2NDg2ODI1OSwiaWQiOiIwMTk3M2U3Zi1lOTU2LTcxYzUtYTY5Yi0wNjYxNzhhYTU0NWEiLCJpaWQiOjQ1MTA3NTA0LCJvaWQiOjEzNjE0MjgsInMiOjc5MzQsInNpZCI6Ijg5ZjRiNjllLTFkNDYtNDZiYS1hN2JkLWU0NjRjODczODliMyIsInQiOmZhbHNlLCJ1aWQiOjQ1MTA3NTA0fQ.Pj11Q4IhKPMU-ZSvgoyDU_X0a8Eh20GdRhRSAaeB6fisASnRzkVb_oD7iK5oZ-ldu7K7NzkolxR8zBFrgPtREg"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    "Authorization": API_KEY,
    "Content-Type": "application/json"
}

# –î–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
START_DATE = "2025-06-16"
END_DATE = "2025-07-20"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
CATEGORIES = [
    {"name": "–ë—Ä—É–¥–µ—Ä—ã", "object_names": ["–ë—Ä—É–¥–µ—Ä—ã"]},
    {"name": "–ö–æ—Ä–º—É—à–∫–∏ –∏ –ø–æ–∏–ª–∫–∏", "object_names": ["–ö–æ—Ä–º—É—à–∫–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–ü–æ–∏–ª–∫–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"]},
    {"name": "–ì—Ä–∞–Ω—É–ª—è—Ç–æ—Ä", "object_names": ["–ì—Ä–∞–Ω—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –∫–æ–º–±–∏–∫–æ—Ä–º–∞"]},
    {"name": "–ü–µ—Ä–æ—Å—å–µ–º–∫–∞ (+—à–ø–∞—Ä—á–∞–Ω)", "object_names": ["–ü–µ—Ä–æ—Å—ä–µ–º–Ω—ã–µ –º–∞—à–∏–Ω—ã"]},
    {"name": "–ö—É—Ä—è—Ç–Ω–∏–∫–∏ –∏ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –ø—Ç–∏—Ü", "object_names": ["–ö–ª–µ—Ç–∫–∏ –¥–ª—è –ø—Ç–∏—Ü", "–ö—É—Ä—è—Ç–Ω–∏–∫–∏"]},
    {"name": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "object_names": ["–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"]},
    {"name": "–ò–Ω–∫—É–±–∞—Ç–æ—Ä—ã", "object_names": ["–ò–Ω–∫—É–±–∞—Ç–æ—Ä—ã"]},
    {"name": "–ö–ª–µ—Ç–∫–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö/–∫—Ä–æ–ª–∏–∫–æ–≤", "object_names": ["–ö–ª–µ—Ç–∫–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"]},
    {"name": "–ë—É–¥–∫–∏ –¥–ª—è —Å–æ–±–∞–∫", "object_names": ["–ë—É–¥–∫–∏ –¥–ª—è —Å–æ–±–∞–∫"]},
    {"name": "–ü–µ—á—å", "object_names": ["–ü–µ—á–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ"]},
    {"name": "–ì–Ω–µ–∑–¥–æ", "object_names": ["–ì–Ω–µ–∑–¥–∞ –¥–ª—è –ø—Ç–∏—Ü"]}
]

def get_weekly_periods(start_date, end_date):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    start = datetime.strptime(start_date, "%Y-%m-%d")
    end = datetime.strptime(end_date, "%Y-%m-%d")
    
    periods = []
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    current_monday = start
    while current_monday.weekday() != 0:  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        current_monday -= timedelta(days=1)
    
    while current_monday <= end:
        week_start = max(current_monday, start)
        week_end = min(current_monday + timedelta(days=6), end)  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        periods.append({
            'start': week_start.strftime("%Y-%m-%d %H:%M:%S").replace(" 00:00:00", " 00:00:00"),
            'end': week_end.strftime("%Y-%m-%d %H:%M:%S").replace(" 00:00:00", " 23:59:59"),
            'start_display': week_start.strftime("%d.%m"),
            'end_display': week_end.strftime("%d.%m")
        })
        
        current_monday += timedelta(days=7)
    
    return periods

def get_all_cards_for_period(period_start, period_end):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    
    Args:
        period_start (str): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM:SS"
        period_end (str): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM:SS"
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    url = "https://seller-analytics-api.wildberries.ru/api/v2/nm-report/detail"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–æ–≤
    payload = {
        "brandNames": [],
        "objectIDs": [],
        "tagIDs": [],
        "nmIDs": [],
        "timezone": "Europe/Moscow",
        "period": {
            "begin": period_start,
            "end": period_end
        },
        "orderBy": {
            "field": "ordersSumRub",
            "mode": "desc"
        },
        "page": 1
    }
    
    all_cards = []
    page_count = 0
    
    try:
        print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_start} - {period_end}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        while True:
            page_count += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            if payload["page"] > 1:
                print("  –ü–∞—É–∑–∞ 21 —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ª–∏–º–∏—Ç API)...")
                time.sleep(21)   # 21 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
            response = requests.post(url, headers=HEADERS, data=json.dumps(payload))
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {payload['page']}")
            
            response.raise_for_status()
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if data.get("error", False):
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {data.get('errorText', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                if data.get("additionalErrors"):
                    for error in data["additionalErrors"]:
                        print(f"  - {error.get('field', '')}: {error.get('description', '')}")
                break
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            cards = data.get("data", {}).get("cards", [])
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {payload['page']}")
            
            all_cards.extend(cards)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if not data.get("data", {}).get("isNextPage", False):
                break
            else:
                print("üìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (isNextPage: true)")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            payload["page"] += 1
        
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        return all_cards
        
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: {e.response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e.response.text}")
        return []

def filter_cards_by_categories(cards):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ object.name
    
    Args:
        cards (list): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    category_stats = {}
    for category in CATEGORIES:
        category_stats[category['name']] = {
            "orders_sum": 0, 
            "buyouts_sum": 0, 
            "orders_count": 0, 
            "buyouts_count": 0,
            "cards_count": 0
        }
    
    # –ö–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    unmatched_objects = set()
    
    for card in cards:
        object_name = card.get("object", {}).get("name", "")
        stats = card.get("statistics", {}).get("selectedPeriod", {})
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_found = False
        
        for category in CATEGORIES:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if any(obj_name.lower() in object_name.lower() for obj_name in category["object_names"]):
                category_stats[category['name']]["orders_sum"] += stats.get("ordersSumRub", 0)
                category_stats[category['name']]["buyouts_sum"] += stats.get("buyoutsSumRub", 0)
                category_stats[category['name']]["orders_count"] += stats.get("ordersCount", 0)
                category_stats[category['name']]["buyouts_count"] += stats.get("buyoutsCount", 0)
                category_stats[category['name']]["cards_count"] += 1
                category_found = True
                break
        
        if not category_found and object_name:
            unmatched_objects.add(object_name)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
    if unmatched_objects:
        print(f"\n–û–±—ä–µ–∫—Ç—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({len(unmatched_objects)}):")
        for obj in sorted(unmatched_objects):
            print(f"  - {obj}")
    
    return category_stats

def create_csv_report(periods, all_weekly_data):
    """–°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –≤ –ø–∞–ø–∫–µ Documents"""
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ Documents
    documents_path = os.path.expanduser("~/Documents")
    csv_filename = f"wb_analytics_report_{START_DATE}_to_{END_DATE}.csv"
    csv_path = os.path.join(documents_path, csv_filename)
    
    with open(csv_path, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤)
        headers = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']
        for period in periods:
            headers.append(f"–ù–µ–¥–µ–ª—è {period['start_display']}-{period['end_display']} (–ó–∞–∫–∞–∑—ã ‚ÇΩ)")
        headers.append('–ò—Ç–æ–≥–æ –∑–∞–∫–∞–∑—ã ‚ÇΩ')
        
        writer.writerow(headers)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã)
        for category in CATEGORIES:
            category_name = category['name']
            row = [category_name]
            total_orders = 0
            
            for period_idx in range(len(periods)):
                orders_sum = all_weekly_data[period_idx].get(category_name, {}).get("orders_sum", 0)
                
                row.append(f"{orders_sum:.0f}")
                total_orders += orders_sum
            
            row.append(f"{total_orders:.0f}")
            writer.writerow(row)
        
        # –°—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–æ–π (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã)
        sum_row = ['–ò–¢–û–ì–û']
        grand_total_orders = 0
        
        for period_idx in range(len(periods)):
            period_orders_total = sum(
                all_weekly_data[period_idx].get(cat['name'], {}).get("orders_sum", 0) 
                for cat in CATEGORIES
            )
            
            sum_row.append(f"{period_orders_total:.0f}")
            grand_total_orders += period_orders_total
        
        sum_row.append(f"{grand_total_orders:.0f}")
        writer.writerow(sum_row)
    
    print(f"\nCSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_path}")
    return csv_path

def main():
    print(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wildberries —á–µ—Ä–µ–∑ Analytics API v2 –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {START_DATE} –ø–æ {END_DATE}\n")
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: 1 –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é + –ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    periods = get_weekly_periods(START_DATE, END_DATE)
    
    print("–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):")
    for i, period in enumerate(periods, 1):
        print(f"–ù–µ–¥–µ–ª—è {i}: {period['start']} - {period['end']} ({period['start_display']} - {period['end_display']})")
    print(f"\n–í—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ {len(periods)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API\n")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º
    all_weekly_data = []
    
    for period_idx, period in enumerate(periods, 1):
        print(f"\n{'=' * 70}")
        print(f"–ù–ï–î–ï–õ–Ø {period_idx}: {period['start_display']} - {period['end_display']}")
        print(f"{'=' * 70}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–µ–¥–µ–ª—å
        if period_idx > 1:
            print("  –ü–∞—É–∑–∞ 25 —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–µ–¥–µ–ª—å (–ª–∏–º–∏—Ç API)...")
            time.sleep(25)
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        all_cards = get_all_cards_for_period(period['start'], period['end'])
        
        if not all_cards:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            empty_stats = {}
            for category in CATEGORIES:
                empty_stats[category['name']] = {
                    "orders_sum": 0, "buyouts_sum": 0, 
                    "orders_count": 0, "buyouts_count": 0, 
                    "cards_count": 0
                }
            all_weekly_data.append(empty_stats)
            continue
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\n–§–∏–ª—å—Ç—Ä—É–µ–º {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
        weekly_stats = filter_cards_by_categories(all_cards)
        all_weekly_data.append(weekly_stats)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –ø–æ –Ω–µ–¥–µ–ª–µ
        print(f"\n–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ {period_idx}:")
        for category_name, stats in weekly_stats.items():
            if stats["cards_count"] > 0:
                print(f"  {category_name}: {stats['cards_count']} –∫–∞—Ä—Ç–æ—á–µ–∫, "
                      f"–∑–∞–∫–∞–∑—ã {stats['orders_sum']:.0f}‚ÇΩ, –≤—ã–∫—É–ø—ã {stats['buyouts_sum']:.0f}‚ÇΩ")
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
    csv_path = create_csv_report(periods, all_weekly_data)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    print("\n\n")
    print(f"{'=' * 100}")
    print(f"–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ù–ï–î–ï–õ–Ø–ú")
    print(f"{'=' * 100}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header = f"{'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<35}"
    for period in periods:
        header += f" | {period['start_display']}-{period['end_display']} –ó/–í"
    header += f" | {'–ò—Ç–æ–≥–æ –ó/–í':<15}"
    print(header)
    print("-" * len(header))
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category in CATEGORIES:
        category_name = category['name']
        row = f"{category_name:<35}"
        category_total_orders = 0
        category_total_buyouts = 0
        
        for week_data in all_weekly_data:
            stats = week_data.get(category_name, {})
            orders = stats.get("orders_sum", 0)
            buyouts = stats.get("buyouts_sum", 0)
            row += f" | {orders:>6.0f}/{buyouts:>6.0f}"
            category_total_orders += orders
            category_total_buyouts += buyouts
        
        row += f" | {category_total_orders:>6.0f}/{category_total_buyouts:>6.0f}"
        print(row)
    
    print(f"{'=' * 100}")
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤
    grand_total_orders = sum(
        sum(week_data.get(cat['name'], {}).get("orders_sum", 0) for cat in CATEGORIES)
        for week_data in all_weekly_data
    )
    grand_total_buyouts = sum(
        sum(week_data.get(cat['name'], {}).get("buyouts_sum", 0) for cat in CATEGORIES)
        for week_data in all_weekly_data
    )
    
    print(f"\n–û–ë–©–ò–ï –ò–¢–û–ì–ò:")
    print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {grand_total_orders:.2f} ‚ÇΩ")
    print(f"–í—Å–µ–≥–æ –≤—ã–∫—É–ø–æ–≤: {grand_total_buyouts:.2f} ‚ÇΩ")
    print(f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤—ã–∫—É–ø: {(grand_total_buyouts/grand_total_orders*100 if grand_total_orders > 0 else 0):.1f}%")
    print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API: {len(periods)} (–≤–º–µ—Å—Ç–æ {len(CATEGORIES) * len(periods)})")

if __name__ == "__main__":
    main() 