import pandas as pd
import os
import sys
from collections import defaultdict

def find_all_sources(df, target, visited=None):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π"""
    if visited is None:
        visited = set()
    
    if target in visited:
        return set()
    
    visited.add(target)
    sources = set()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã
    direct_sources = df[df['–¥–µ–ª–∞–µ–º –¥–µ—Ç–∞–ª—å'].str.strip() == target]['–±–µ—Ä–µ–º –¥–µ—Ç–∞–ª—å'].str.strip()
    
    for source in direct_sources:
        sources.add(source)
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ source
        sources.update(find_all_sources(df, source, visited))
    
    return sources

def get_unique_nodes(target_product):
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = '/Users/maksimshchegolikhin/Desktop/Programming/Table.csv'
        
        if not os.path.exists(file_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
            
        # –ß–∏—Ç–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        df = pd.read_csv(file_path, sep=';')
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–µ–ª–µ–≤—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
        all_related_nodes = find_all_sources(df, target_product)
        all_related_nodes.add(target_product)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
        df_filtered = df[
            (df['–±–µ—Ä–µ–º –¥–µ—Ç–∞–ª—å'].str.strip().isin(all_related_nodes)) & 
            (df['–¥–µ–ª–∞–µ–º –¥–µ—Ç–∞–ª—å'].str.strip().isin(all_related_nodes))
        ]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if df_filtered.empty:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–¥–µ–ª–∏—è: {target_product}")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–æ–ª–±—Ü–µ A)
        all_sources = set(df_filtered['–±–µ—Ä–µ–º –¥–µ—Ç–∞–ª—å'].str.strip())
        all_targets = set(df_filtered['–¥–µ–ª–∞–µ–º –¥–µ—Ç–∞–ª—å'].str.strip())
        start_nodes = all_sources - all_targets
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã
        non_start_nodes = all_sources.union(all_targets) - start_nodes
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        sorted_nodes = sorted(list(non_start_nodes))
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –∏–∑–¥–µ–ª–∏—è {target_product}:")
        print("=" * 50)
        for i, node in enumerate(sorted_nodes, 1):
            print(f"{i}. {node}")
        print("=" * 50)
        print(f"–í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω: {len(sorted_nodes)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞")
        print("–ü—Ä–∏–º–µ—Ä: python get_nodes.py 02.07.01.–°01")
        sys.exit(1)
    
    target_product = sys.argv[1].strip()
    get_unique_nodes(target_product)