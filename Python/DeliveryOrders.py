import requests
import pandas as pd
from datetime import datetime
import os
from collections import defaultdict

def get_fbs_orders(api_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    
    url = "https://marketplace-api.wildberries.ru/api/v3/orders"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    
    params = {
        "limit": 1000,
        "next": 0
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        return response.json()
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if hasattr(e.response, 'text'):
            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
        return None

def get_orders_status(api_key, order_ids):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    url = "https://marketplace-api.wildberries.ru/api/v3/orders/status"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_counts = defaultdict(int)
    filtered_orders = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 1000 —à—Ç—É–∫
    batch_size = 1000
    
    for i in range(0, len(order_ids), batch_size):
        batch = order_ids[i:i + batch_size]
        
        try:
            response = requests.post(url, headers=headers, json={"orders": batch})
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–∞—Ö
            orders_status = response.json().get('orders', [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            for order in orders_status:
                if isinstance(order, dict):
                    supplier_status = order.get('supplierStatus', 'unknown')
                    wb_status = order.get('wbStatus', 'unknown')
                    status_pair = (supplier_status, wb_status)
                    status_counts[status_pair] += 1
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
                    if wb_status == 'waiting' and supplier_status in ['complete', 'confirm']:
                        filtered_orders[order.get('id')] = supplier_status
    
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            if hasattr(e.response, 'text'):
                print(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            continue
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    print("=" * 50)
    print(f"{'–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞':<15} | {'–°—Ç–∞—Ç—É—Å WB':<20} | {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':>10}")
    print("-" * 50)
    
    for (supplier_status, wb_status), count in sorted(status_counts.items()):
        print(f"{supplier_status:<15} | {wb_status:<20} | {count:>10}")
    
    print("=" * 50)
    print()
    
    return filtered_orders

def process_orders(orders_data, filtered_orders):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç DataFrame"""
    
    if not orders_data or 'orders' not in orders_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ API")
        return None
    
    orders = []
    for order in orders_data['orders']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        order_id = order.get('id')
        if order_id in filtered_orders:
            order_info = {
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': order_id,
                '–ê—Ä—Ç–∏–∫—É–ª WB': order.get('article', ''),
                '–ë–∞—Ä–∫–æ–¥': order.get('barcode', ''),
                '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': order.get('name', ''),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': order.get('quantity', 0),
                '–¶–µ–Ω–∞': order.get('price', 0),
                '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞': order.get('createdAt', ''),
                '–°–∫–ª–∞–¥': order.get('warehouseName', ''),
                '–°—Ç–∞—Ç—É—Å': f"{filtered_orders[order_id]}/waiting"
            }
            orders.append(order_info)
    
    if not orders:
        print("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return None
    
    df = pd.DataFrame(orders)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
    status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
    print("\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in status_counts.items():
        print(f"‚úÖ {status}: {count}")
    
    return df

def save_to_csv(df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV —Ñ–∞–π–ª"""
    
    if df is None:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    current_date = datetime.now().strftime("%Y-%m-%d_%H-%M")
    filename = f"wb_orders_{current_date}.csv"
    full_path = os.path.join(current_dir, filename)
    
    try:
        df.to_csv(full_path, index=False, encoding='utf-8-sig', sep=';')
        print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:")
        print(f"üìÇ {full_path}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(df)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def main():
    API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjUwMTIwdjEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc1NTE0Mzg4MiwiaWQiOiIwMTk0ZmFlMS1iMTI0LTc2M2EtYTI5OS00ZWFkMzBhMDBjNzciLCJpaWQiOjIyODU1MDkwLCJvaWQiOjEzNjE0MjgsInMiOjM4MzgsInNpZCI6Ijg5ZjRiNjllLTFkNDYtNDZiYS1hN2JkLWU0NjRjODczODliMyIsInQiOmZhbHNlLCJ1aWQiOjIyODU1MDkwfQ.7pX4vEgx-hfw6iywBb8V0LncnKJZFI4zEZ7meeIW2I7RNf6Ndnnuf8cokl6HMdEH7jL47ZaeOW_TWl1q4Gsr1Q"
    
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...")
    orders_data = get_fbs_orders(API_KEY)
    
    if orders_data and 'orders' in orders_data:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        order_ids = [order['id'] for order in orders_data['orders']]
        print(f"üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(order_ids)}")
        
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤...")
        filtered_orders = get_orders_status(API_KEY, order_ids)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏: {len(filtered_orders)}")
        
        print("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        df = process_orders(orders_data, filtered_orders)
        save_to_csv(df)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")

if __name__ == "__main__":
    main()